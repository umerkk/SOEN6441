
import java.awt.Color;
import java.awt.GridLayout;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author alaa
 */
public class MapEditor extends javax.swing.JFrame {
private TowerDefenseGame towerDefense;
private int tool;
private ArrayList<Tiles> currentMap;
private ArrayList<String> savedMaps;

    /**
     * Creates new form MapEditor
     */
    public MapEditor() {
        initComponents();
        tool=4;
        currentMap=new ArrayList<Tiles>();
       
    }
    
    public MapEditor(TowerDefenseGame tdg) {
        initComponents();
        towerDefense=tdg;
        tool=4;
        currentMap=new ArrayList<Tiles>();
        try{
            FileInputStream fis=new FileInputStream("src//saved maps//savedMaps");
            ObjectInputStream ois=new ObjectInputStream(fis);
            savedMaps=(ArrayList<String>)ois.readObject();
            ois.close();
        }catch(ClassNotFoundException ex){
            savedMaps=new ArrayList<String>();    
        }catch(IOException ex){
           savedMaps=new ArrayList<String>(); 
           createMapsFile();
        }
        
    }
    
    public void createMapsFile(){
       try{
            FileOutputStream fos=new FileOutputStream("src//saved maps//savedMaps");
            ObjectOutputStream oos=new ObjectOutputStream(fos);
            oos.writeObject(savedMaps);
            oos.close();
        }catch(Exception ex){
           ex.printStackTrace();
        } 
    }
    
    public int getTool(){
        return tool;
    }
    
    public ArrayList<Tiles> getCurrentMap()
    {
        return currentMap;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(825, 585));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(685, 450));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setOpaque(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("MAP EDITOR");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(329, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setOpaque(false);

        jButton1.setText("Upload Saved Map");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Editting Tools"));
        jPanel7.setOpaque(false);

        jLabel2.setText("Map's Size: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "select size", "5X8", "7X10", "8X11", "9X12", "10X14", "11X15", "12X16", "13X18", "14X20", "15X22", "16X24" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel8.setOpaque(false);
        jPanel8.setLayout(new java.awt.GridLayout(2, 2, 10, 10));

        jLabel3.setBackground(new java.awt.Color(204, 102, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 255, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("S");
        jLabel3.setOpaque(true);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel3);

        jLabel4.setBackground(new java.awt.Color(204, 102, 0));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("E");
        jLabel4.setOpaque(true);
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel4);

        jLabel5.setBackground(new java.awt.Color(204, 102, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("P");
        jLabel5.setOpaque(true);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel5);

        jLabel6.setBackground(new java.awt.Color(102, 255, 0));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Sc");
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton2.setText("Start Play");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(26, 26, 26)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.LINE_START);

        jPanel6.setBackground(new java.awt.Color(102, 255, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));
        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 790, 540);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BGImage1.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-10, -12, 3000, 2250);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // start play button:
        if(currentMap.size()>0)
        {
        int reply=JOptionPane.showConfirmDialog(null, "Do you want to save this map before srart playing? ",
                                                      "Save Map", JOptionPane.YES_NO_CANCEL_OPTION);
        if(reply==JOptionPane.YES_OPTION){
            saveMap();
        }
        if(reply==JOptionPane.NO_OPTION){
            returnToGame(); 
        }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please create a map or upload a saved map to start play!","No Map exist",JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void returnToGame()
    {
        paintMap();
        towerDefense.setVisible(true);
        this.setVisible(false);     
    }
    
    public void paintMap()
    {
        towerDefense.showMap();   
    }
    
    
    private void saveMap()
    {
        
            ArrayList<String> savedInfo=getInfo(currentMap);
            String name=JOptionPane.showInputDialog("Please name the map to save it: ");
        
        //press OK
        if(name!=null)
        {
           int usedName=savedMaps.indexOf(name);
           int done=0;
           //if player entered a name and it is used before
           if(usedName>=0 && name.length()!=0){
              String time=new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
              int reply=JOptionPane.showConfirmDialog(null, "this name is used. If you want to edit its file press Yes.\n "
                                                          + "If you want to create a new map press NO,\n "
                                                          + " it will be saved with the name: "+name+time, "Used Name", JOptionPane.YES_NO_CANCEL_OPTION);
              
        
              if(reply==JOptionPane.YES_OPTION){
            
                  done=saveFile(name,savedInfo);
                  returnToGame();
            
             }else if(reply==JOptionPane.NO_OPTION){
            
                  done=saveFile(name+time,savedInfo);
                  if(done==1){
                     addToSavedMaps(name+time);
                     returnToGame();
                  }
              }
        
        
            }//if player entered name that is not used before
            else if(usedName<0 && name.length()!=0){
                 
                 done=saveFile(name,savedInfo);
                 if(done==1)
                 addToSavedMaps(name);
                 returnToGame();
  
            }//if player did not write any thing and pressed OK
            else if(name.length()==0){
                 JOptionPane.showMessageDialog(null,"The map was Not saved!","NOT SAVED",JOptionPane.INFORMATION_MESSAGE);
                 returnToGame();
            }
        } 
        
      
        
    }
    
    private void addToSavedMaps(String newMap){
        savedMaps.add(newMap);
        try{
            FileOutputStream fos=new FileOutputStream("src//saved maps//savedMaps");
            ObjectOutputStream oos=new ObjectOutputStream(fos);
            oos.writeObject(savedMaps);
            oos.close();
            
        }catch(Exception ex){
           
        }   
    }
    
    private int saveFile(String fileName, ArrayList<String> savedInfo){
       try{
            FileOutputStream fos=new FileOutputStream("src//saved maps//"+fileName);
            ObjectOutputStream oos=new ObjectOutputStream(fos);
            oos.writeObject(savedInfo);
            oos.close();
            return 1;
        }catch(Exception ex){
           return 0;
        }   
    }
    
    private ArrayList<String> getInfo(ArrayList<Tiles> a){
    ArrayList<String> info=new ArrayList<String>();
    for(int i=0;i<a.size();i++){
        info.add(a.get(i).getState());
    }
    int r=a.get(a.size()-1).getRow();
    r++;
    int c=a.get(a.size()-1).getCol();
    c++;
    info.add(r+"");
    info.add(c+"");
    return info;
}
    
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // Select the size of the map and draw it
         JComboBox cb=(JComboBox)evt.getSource();
         int size=cb.getSelectedIndex();
         if(size!=0)
         {
         switch(size)
         {
             case 1: divideMap(5,8);break;
             case 2: divideMap(7,10);break;
             case 3: divideMap(8,11);break;
             case 4: divideMap(9,12);break;
             case 5: divideMap(10,14);break;
             case 6: divideMap(11,15);break;
             case 7: divideMap(12,16);break;    
             case 8: divideMap(13,18);break;
             case 9: divideMap(14,20);break;
             case 10: divideMap(15,22);break;
             case 11: divideMap(16,24);break;
         }
         jPanel6.revalidate();
         }
         
         
         
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        tool=1;
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        tool=2;
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        tool=3;
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        tool=4;
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // upload saved map:
        
        if(savedMaps.size()>0){
        JComboBox mapsList=new JComboBox(savedMaps.toArray());
        JOptionPane.showMessageDialog(null, mapsList, "Choose one of the maps", JOptionPane.QUESTION_MESSAGE);
        String fileName=(String)mapsList.getSelectedItem();
        drawMap(fileName);
        }else{
          JOptionPane.showMessageDialog(null, "No saved maps", "Not Found", JOptionPane.INFORMATION_MESSAGE);  
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void drawMap(String mapName){
      ArrayList<String> mapInfo=readFile(mapName);
      if(mapInfo!=null)
      {
          int row=Integer.parseInt(mapInfo.get(mapInfo.size()-2));
          int col=Integer.parseInt(mapInfo.get(mapInfo.size()-1));
          divideMap(row,col);
          Color b=new Color(204,102,0);
          Color g=new Color(102,255,0);
          for(int i=0;i<row*col;i++)
          {
              if(mapInfo.get(i).equals("start"))
              {
                  currentMap.get(i).changeDesign(b, "S", "start");
              }
              else if(mapInfo.get(i).equals("end"))
              {
                  currentMap.get(i).changeDesign(b, "E", "end");
              }
              else if(mapInfo.get(i).equals("path"))
              {
                  currentMap.get(i).changeDesign(b, "", "path");
              }
              else if(mapInfo.get(i).equals("scenary"))
              {
                  currentMap.get(i).changeDesign(g, "", "scenary");
              }
          }
          jPanel6.revalidate();
          
      }
      
      
    }
    
    private ArrayList<String> readFile(String mapName){
      ArrayList<String> retrievedInfo;
      try{
            FileInputStream fis=new FileInputStream("src//saved maps//"+mapName);
            ObjectInputStream ois=new ObjectInputStream(fis);
            retrievedInfo=(ArrayList<String>)ois.readObject();
            ois.close();
        }catch(ClassNotFoundException ex){
            JOptionPane.showMessageDialog(null,"File can not be found","Error Message",JOptionPane.ERROR_MESSAGE);
            return null;
        }catch(IOException ex){
           JOptionPane.showMessageDialog(null,"File can not be found","Error Message",JOptionPane.ERROR_MESSAGE);
           return null;
        }
      return retrievedInfo;
    }
    
    private void divideMap(int rows,int cols){
    jPanel6.removeAll();
    jPanel6.setLayout(new GridLayout(rows,cols,1,1));
    currentMap.clear();
    int tileNo=0;
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            
            currentMap.add(new Tiles(i, j, tileNo, this));
            jPanel6.add(currentMap.get(tileNo));
            tileNo++;
            
            
        }
    }
    
    
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    // End of variables declaration//GEN-END:variables
}
